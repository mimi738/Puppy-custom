diff -rupN wlroots-0.14.1-orig/backend/session/session.c wlroots-0.14.1/backend/session/session.c
--- wlroots-0.14.1-orig/backend/session/session.c	2021-11-07 08:52:08.444420758 +0200
+++ wlroots-0.14.1/backend/session/session.c	2021-11-07 08:52:12.264420635 +0200
@@ -337,6 +337,17 @@ bool wlr_session_change_vt(struct wlr_se
 	return libseat_switch_session(session->seat_handle, vt) == 0;
 }
 
+/* https://gitlab.freedesktop.org/mesa/drm/-/blob/5d97031e8aa717c83993fcdaa45b0812ddceb3b0/xf86drmMode.c#L152 */
+static int compat_drmIsKMS(int fd)
+{
+	struct drm_mode_card_res res = {0};
+
+	if (drmIoctl(fd, DRM_IOCTL_MODE_GETRESOURCES, &res) != 0)
+		return 0;
+
+	return res.count_crtcs > 0 && res.count_connectors > 0 && res.count_encoders > 0;
+}
+
 /* Tests if 'path' is KMS compatible by trying to open it. Returns the opened
  * device on success. */
 static struct wlr_device *open_if_kms(struct wlr_session *restrict session,
@@ -350,7 +361,7 @@ static struct wlr_device *open_if_kms(st
 		return NULL;
 	}
 
-	if (!drmIsKMS(dev->fd)) {
+	if (!compat_drmIsKMS(dev->fd)) {
 		wlr_log(WLR_DEBUG, "Ignoring '%s': not a KMS device", path);
 		wlr_session_close_file(session, dev);
 		return NULL;
diff -rupN wlroots-0.14.1-orig/meson.build wlroots-0.14.1/meson.build
--- wlroots-0.14.1-orig/meson.build	2021-11-07 08:52:08.468420757 +0200
+++ wlroots-0.14.1/meson.build	2021-11-07 08:52:12.268420635 +0200
@@ -94,9 +94,9 @@ internal_features = {
 	'xcb-errors': false,
 }
 
-wayland_server = dependency('wayland-server', version: '>=1.19')
+wayland_server = dependency('wayland-server', version: '>=1.18')
 wayland_client = dependency('wayland-client')
-drm = dependency('libdrm', version: '>=2.4.105')
+drm = dependency('libdrm', version: '>=2.4.104')
 gbm = dependency('gbm', version: '>=17.1.0')
 libinput = dependency('libinput', version: '>=1.14.0')
 xkbcommon = dependency('xkbcommon')
diff -rupN wlroots-0.14.1-orig/types/seat/wlr_seat.c wlroots-0.14.1/types/seat/wlr_seat.c
--- wlroots-0.14.1-orig/types/seat/wlr_seat.c	2021-11-07 08:52:08.476420757 +0200
+++ wlroots-0.14.1/types/seat/wlr_seat.c	2021-11-07 08:52:12.268420635 +0200
@@ -20,7 +20,7 @@ static void seat_handle_get_pointer(stru
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_POINTER)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_pointer called when no pointer capability has existed");
 		return;
 	}
@@ -34,7 +34,7 @@ static void seat_handle_get_keyboard(str
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_KEYBOARD)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_keyboard called when no keyboard capability has existed");
 		return;
 	}
@@ -48,7 +48,7 @@ static void seat_handle_get_touch(struct
 	struct wlr_seat_client *seat_client =
 		wlr_seat_client_from_resource(seat_resource);
 	if (!(seat_client->seat->accumulated_capabilities & WL_SEAT_CAPABILITY_TOUCH)) {
-		wl_resource_post_error(seat_resource, WL_SEAT_ERROR_MISSING_CAPABILITY,
+		wl_resource_post_error(seat_resource, 0,
 				"wl_seat.get_touch called when no touch capability has existed");
 		return;
 	}
